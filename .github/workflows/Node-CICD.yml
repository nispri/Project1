name: Build,Analyze,scan

on:
  push:
    branches:
      - main


jobs:
  build-analyze-scan:
    name: Build
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Build and analyze with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: npm install dependency
        run: npm install

      - name: Trivy file scan
        run: trivy fs . > trivyfs.txt

      - name: Docker Build and push
        run: |
          docker build -t node-api .
          docker tag node-api nispri/node-api:latest
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker push nispri/node-api:latest
        env:
          DOCKER_CLI_ACI: 1

      - name: Image scan
        run: trivy image nispri/node-api:latest > trivyimage.txt
  
  deploy:
   needs: build-analyze-scan   
   runs-on: [self-hosted]
   steps:
      - name: docker pull image
        run: docker pull nispri/node-api:latest

      - name: Image scan
        run: trivy image nispri/node-api:latest > trivyimagedeploy.txt
      
      - name: Deploy to container
        run: |
          # Check if the container is already running
          if [ "$(docker ps -q -f name=node-api)" ]; then
            echo "Stopping and removing the existing container..."
            docker stop node-api
            docker rm node-api
          elif [ "$(docker ps -aq -f status=exited -f name=node-api)" ]; then
            echo "Removing the stopped container..."
            docker rm node-api
          else
            echo "No existing container found, deploying a new one..."
          fi
    
          # Deploy the new container
          docker run -d --name node-api -p 3000:3000 nispri/node-api:latest
          
      - name: Update kubeconfig
        run: aws eks --region ap-south-1 update-kubeconfig --name EKS_CLOUD

      - name: Deploy to kubernetes
        run: kubectl apply -f deployment-service.yml
  
      - name: Send a Slack Notification
        if: always()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#event'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
